/*
 * Created on 7 Sep 2017 ( Time 17:05:08 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */

package com.nmac.payments.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.nmac.payments.entities.User;
import com.nmac.payments.exceptions.UserNotFoundException;
import com.nmac.payments.repository.UserRepository;

@Service
@Transactional(rollbackFor=UserNotFoundException.class)
public class UserService 
{
	private static Logger logger = LoggerFactory.getLogger(UserService.class);
	
	@Autowired
	private UserRepository userRepository;
		
	/*
	 * READ methods
	 */
	public Page<User> findAll(int page, int count) {
		
		if (logger.isDebugEnabled())
			logger.debug("UserService -> findAll Users");
		
		return userRepository.findAll(new PageRequest(page, count));
	}

	public Iterable<User> findAll() {
		
		if (logger.isDebugEnabled())
			logger.debug("UserService -> findAll Users");
		
		return userRepository.findAll();
	}
/*
	public User findBySfid(String user){
		if (logger.isDebugEnabled())
			logger.debug("Retrieving User with sfid:" + user);
		
		return userRepository.findBySfid(user);
		
	}
*/
	public User get(int id) {
		if (logger.isDebugEnabled())
			logger.debug("Retrieving User with id:" + id);
		
		User elementToGet = userRepository.findOne(id);
		
		if (elementToGet == null)
			throw new UserNotFoundException(id);
		
		return elementToGet;
	}

	public User create(User user) {

		if (logger.isDebugEnabled())
			logger.debug("UserService -> create:" + user);
			
		return userRepository.save(user);
	}

	public User update(User user) {
		
		if (logger.isDebugEnabled())
			logger.debug("UserService -> create:" + user);

		User elementToUpdate = userRepository.findOne(user.getId());
		
		if (elementToUpdate == null)
			throw new UserNotFoundException(user.getName());
		
		elementToUpdate.update(user);
		userRepository.save(elementToUpdate);
		
		return elementToUpdate;
	}

	public User delete(int id) {
		if (logger.isDebugEnabled())
			logger.debug("UserService -> delete:" + id);

		User elementToDelete = get(id);
		
		if (elementToDelete == null)
			throw new UserNotFoundException(id);
		
		userRepository.delete(elementToDelete);

		return elementToDelete;
	}

}

