/*
 * Created on 7 Sep 2017 ( Time 17:05:08 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */

package com.nmac.payments.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.nmac.payments.entities.NmacUser;
import com.nmac.payments.exceptions.NmacUserNotFoundException;
import com.nmac.payments.repository.NmacUserRepository;

@Service
@Transactional(rollbackFor=NmacUserNotFoundException.class)
public class NmacUserService 
{
	private static Logger logger = LoggerFactory.getLogger(NmacUserService.class);
	
	@Autowired
	private NmacUserRepository nmacUserRepository;
		
	/*
	 * READ methods
	 */
	public Page<NmacUser> findAll(int page, int count) {
		
		if (logger.isDebugEnabled())
			logger.debug("UserService -> findAll Users");
		
		return nmacUserRepository.findAll(new PageRequest(page, count));
	}

	public Iterable<NmacUser> findAll() {
		
		if (logger.isDebugEnabled())
			logger.debug("UserService -> findAll Users");
		
		return nmacUserRepository.findAll();
	}
/*
	public User findBySfid(String user){
		if (logger.isDebugEnabled())
			logger.debug("Retrieving User with sfid:" + user);
		
		return userRepository.findBySfid(user);
		
	}
*/
	public NmacUser get(int id) {
		if (logger.isDebugEnabled())
			logger.debug("Retrieving User with id:" + id);
		
		NmacUser elementToGet = nmacUserRepository.findOne(id);
		
		if (elementToGet == null)
			throw new NmacUserNotFoundException(id);
		
		return elementToGet;
	}

	public NmacUser create(NmacUser nmacUser) {

		if (logger.isDebugEnabled())
			logger.debug("UserService -> create:" + nmacUser);
			
		return nmacUserRepository.save(nmacUser);
	}

	public NmacUser update(NmacUser nmacUser) {
		
		if (logger.isDebugEnabled())
			logger.debug("UserService -> create:" + nmacUser);

		NmacUser elementToUpdate = nmacUserRepository.findOne(nmacUser.getId());
		
		if (elementToUpdate == null)
			throw new NmacUserNotFoundException(nmacUser.getName());
		
		elementToUpdate.update(nmacUser);
		nmacUserRepository.save(elementToUpdate);
		
		return elementToUpdate;
	}

	public NmacUser delete(int id) {
		if (logger.isDebugEnabled())
			logger.debug("UserService -> delete:" + id);

		NmacUser elementToDelete = get(id);
		
		if (elementToDelete == null)
			throw new NmacUserNotFoundException(id);
		
		nmacUserRepository.delete(elementToDelete);

		return elementToDelete;
	}

}

